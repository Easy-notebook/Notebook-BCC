# ==============================================
# Notebook-BCC Configuration
# ==============================================

# Backend Jupyter Kernel Service URL
# The HTTP endpoint for the backend Jupyter kernel server
BACKEND_BASE_URL=http://localhost:8000

# DSLC Workflow API URL
# The HTTP endpoint for the Data Science Lifecycle workflow API
DSLC_BASE_URL=http://localhost:8001

# Initial Notebook ID (optional)
# If you have an existing notebook session, specify its ID here
# If not provided, a new notebook will be initialized
NOTEBOOK_ID=

# ==============================================
# Workflow Control Settings
# ==============================================

# Maximum steps to execute (0 = unlimited)
# Use this to limit execution for debugging or testing
MAX_EXECUTION_STEPS=0

# Workflow start mode: 'reflection' or 'generation'
# - 'reflection': Start with feedback API to determine if step is complete
# - 'generation': Start with behavior API to generate actions (default)
WORKFLOW_START_MODE=generation

# Enable interactive mode (true/false)
# When enabled, execution will pause at step limits for manual confirmation
INTERACTIVE_MODE=false

# ==============================================
# Execution Settings
# ==============================================

# Use remote code execution (true/false)
# Set to 'true' to execute code on remote Jupyter kernel
# Set to 'false' for local execution (not recommended)
USE_REMOTE_EXECUTION=true

# Code execution timeout in seconds
EXECUTION_TIMEOUT=300

# Status check interval in seconds
# How frequently to poll for execution status
STATUS_CHECK_INTERVAL=1.0

# ==============================================
# Context Compression Settings
# ==============================================

# Maximum context length for API calls (characters)
MAX_CONTEXT_LENGTH=8000

# Maximum number of history items to keep
MAX_HISTORY_ITEMS=50

# ==============================================
# Logging Settings
# ==============================================

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# ==============================================
# Usage Examples
# ==============================================
#
# To use this configuration:
# 1. Copy this file to .env
# 2. Update the values according to your setup
# 3. Run the application
#
# Command-line options (override .env values):
#   --backend-url <url>         Backend Jupyter kernel URL
#   --dslc-url <url>            DSLC workflow API URL
#   --notebook-id <id>          Initial notebook ID
#   --max-steps <n>             Maximum steps to execute
#   --start-mode <mode>         Start mode (reflection/generation)
#   --interactive               Enable interactive mode
#   --custom-context <json>     Custom context JSON or file path
#
# Examples:
#
# Basic usage:
#   python main.py start --problem "Analyze sales data"
#
# With custom backend:
#   python main.py --backend-url http://localhost:9000 start --problem "Data analysis"
#
# With step limit (debug mode):
#   python main.py --max-steps 5 --interactive start --problem "Test workflow"
#
# With reflection mode:
#   python main.py --start-mode reflection start --problem "Check data"
#
# With custom context:
#   python main.py --custom-context '{"user":"alice","priority":"high"}' start
#   python main.py --custom-context context.json start
#
